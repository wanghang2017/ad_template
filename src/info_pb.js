/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Emarbox.Interface.App', null, global);
goog.exportSymbol('proto.Emarbox.Interface.CreativeInfo', null, global);
goog.exportSymbol('proto.Emarbox.Interface.CreativeInfo.AdslotInfo', null, global);
goog.exportSymbol('proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility', null, global);
goog.exportSymbol('proto.Emarbox.Interface.CreativeInfo.BidType', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.CarrierType', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.Geo', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.MobileDeviceType', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.PlatformType', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.UploadInfo', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.UploadInfo.IdType', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Device.WirelessNetworkType', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Info', null, global);
goog.exportSymbol('proto.Emarbox.Interface.Site', null, global);
goog.exportSymbol('proto.Emarbox.Interface.User', null, global);
goog.exportSymbol('proto.Emarbox.Interface.User.Gender', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Emarbox.Interface.Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.Info.displayName = 'proto.Emarbox.Interface.Info';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.Info.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getField(msg, 1),
    requestId: jspb.Message.getField(msg, 2),
    bidTime: jspb.Message.getField(msg, 3),
    bidTimestamp: jspb.Message.getField(msg, 31),
    ip: jspb.Message.getField(msg, 21),
    user: (f = msg.getUser()) && proto.Emarbox.Interface.User.toObject(includeInstance, f),
    isApp: jspb.Message.getFieldWithDefault(msg, 5, false),
    app: (f = msg.getApp()) && proto.Emarbox.Interface.App.toObject(includeInstance, f),
    creativeInfo: (f = msg.getCreativeInfo()) && proto.Emarbox.Interface.CreativeInfo.toObject(includeInstance, f),
    device: (f = msg.getDevice()) && proto.Emarbox.Interface.Device.toObject(includeInstance, f),
    browserId: jspb.Message.getFieldWithDefault(msg, 9, "0000"),
    site: (f = msg.getSite()) && proto.Emarbox.Interface.Site.toObject(includeInstance, f),
    requestType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    clickId: jspb.Message.getField(msg, 12),
    ext: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.Info}
 */
proto.Emarbox.Interface.Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.Info;
  return proto.Emarbox.Interface.Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.Info}
 */
proto.Emarbox.Interface.Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidTime(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBidTimestamp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIp(value);
      break;
    case 4:
      var value = new proto.Emarbox.Interface.User;
      reader.readMessage(value,proto.Emarbox.Interface.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsApp(value);
      break;
    case 6:
      var value = new proto.Emarbox.Interface.App;
      reader.readMessage(value,proto.Emarbox.Interface.App.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    case 7:
      var value = new proto.Emarbox.Interface.CreativeInfo;
      reader.readMessage(value,proto.Emarbox.Interface.CreativeInfo.deserializeBinaryFromReader);
      msg.setCreativeInfo(value);
      break;
    case 8:
      var value = new proto.Emarbox.Interface.Device;
      reader.readMessage(value,proto.Emarbox.Interface.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrowserId(value);
      break;
    case 10:
      var value = new proto.Emarbox.Interface.Site;
      reader.readMessage(value,proto.Emarbox.Interface.Site.deserializeBinaryFromReader);
      msg.setSite(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestType(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setClickId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint64(
      21,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Emarbox.Interface.User.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Emarbox.Interface.App.serializeBinaryToWriter
    );
  }
  f = message.getCreativeInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Emarbox.Interface.CreativeInfo.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Emarbox.Interface.Device.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSite();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Emarbox.Interface.Site.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * required int32 channel_id = 1;
 * @return {number}
 */
proto.Emarbox.Interface.Info.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.Info.prototype.setChannelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.Info.prototype.clearChannelId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string request_id = 2;
 * @return {string}
 */
proto.Emarbox.Interface.Info.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Info.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.Info.prototype.clearRequestId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string bid_time = 3;
 * @return {string}
 */
proto.Emarbox.Interface.Info.prototype.getBidTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Info.prototype.setBidTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emarbox.Interface.Info.prototype.clearBidTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasBidTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 bid_timestamp = 31;
 * @return {number}
 */
proto.Emarbox.Interface.Info.prototype.getBidTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.Info.prototype.setBidTimestamp = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.Emarbox.Interface.Info.prototype.clearBidTimestamp = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasBidTimestamp = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional uint64 ip = 21;
 * @return {number}
 */
proto.Emarbox.Interface.Info.prototype.getIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.Info.prototype.setIp = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.Emarbox.Interface.Info.prototype.clearIp = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasIp = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional User user = 4;
 * @return {?proto.Emarbox.Interface.User}
 */
proto.Emarbox.Interface.Info.prototype.getUser = function() {
  return /** @type{?proto.Emarbox.Interface.User} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.User, 4));
};


/** @param {?proto.Emarbox.Interface.User|undefined} value */
proto.Emarbox.Interface.Info.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Emarbox.Interface.Info.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_app = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Emarbox.Interface.Info.prototype.getIsApp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Emarbox.Interface.Info.prototype.setIsApp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Emarbox.Interface.Info.prototype.clearIsApp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasIsApp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional App app = 6;
 * @return {?proto.Emarbox.Interface.App}
 */
proto.Emarbox.Interface.Info.prototype.getApp = function() {
  return /** @type{?proto.Emarbox.Interface.App} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.App, 6));
};


/** @param {?proto.Emarbox.Interface.App|undefined} value */
proto.Emarbox.Interface.Info.prototype.setApp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Emarbox.Interface.Info.prototype.clearApp = function() {
  this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasApp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required CreativeInfo creative_info = 7;
 * @return {!proto.Emarbox.Interface.CreativeInfo}
 */
proto.Emarbox.Interface.Info.prototype.getCreativeInfo = function() {
  return /** @type{!proto.Emarbox.Interface.CreativeInfo} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.CreativeInfo, 7, 1));
};


/** @param {!proto.Emarbox.Interface.CreativeInfo} value */
proto.Emarbox.Interface.Info.prototype.setCreativeInfo = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Emarbox.Interface.Info.prototype.clearCreativeInfo = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasCreativeInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Device device = 8;
 * @return {?proto.Emarbox.Interface.Device}
 */
proto.Emarbox.Interface.Info.prototype.getDevice = function() {
  return /** @type{?proto.Emarbox.Interface.Device} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.Device, 8));
};


/** @param {?proto.Emarbox.Interface.Device|undefined} value */
proto.Emarbox.Interface.Info.prototype.setDevice = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.Emarbox.Interface.Info.prototype.clearDevice = function() {
  this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string browser_id = 9;
 * @return {string}
 */
proto.Emarbox.Interface.Info.prototype.getBrowserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0000"));
};


/** @param {string} value */
proto.Emarbox.Interface.Info.prototype.setBrowserId = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Emarbox.Interface.Info.prototype.clearBrowserId = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasBrowserId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Site site = 10;
 * @return {?proto.Emarbox.Interface.Site}
 */
proto.Emarbox.Interface.Info.prototype.getSite = function() {
  return /** @type{?proto.Emarbox.Interface.Site} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.Site, 10));
};


/** @param {?proto.Emarbox.Interface.Site|undefined} value */
proto.Emarbox.Interface.Info.prototype.setSite = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Emarbox.Interface.Info.prototype.clearSite = function() {
  this.setSite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasSite = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 request_type = 11;
 * @return {number}
 */
proto.Emarbox.Interface.Info.prototype.getRequestType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.Info.prototype.setRequestType = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Emarbox.Interface.Info.prototype.clearRequestType = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasRequestType = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string click_id = 12;
 * @return {string}
 */
proto.Emarbox.Interface.Info.prototype.getClickId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Info.prototype.setClickId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Emarbox.Interface.Info.prototype.clearClickId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasClickId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string ext = 13;
 * @return {string}
 */
proto.Emarbox.Interface.Info.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Info.prototype.setExt = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Emarbox.Interface.Info.prototype.clearExt = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Info.prototype.hasExt = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Emarbox.Interface.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.User.displayName = 'proto.Emarbox.Interface.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.User.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    dmpId: jspb.Message.getField(msg, 1),
    channelUserId: jspb.Message.getField(msg, 2),
    gender: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.User}
 */
proto.Emarbox.Interface.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.User;
  return proto.Emarbox.Interface.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.User}
 */
proto.Emarbox.Interface.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDmpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.Emarbox.Interface.User.Gender} */ (reader.readEnum());
      msg.setGender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.Emarbox.Interface.User.Gender} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Emarbox.Interface.User.Gender = {
  GENDER_UNKNOWN: 0,
  MALE: 1,
  FEMALE: 2
};

/**
 * optional string dmp_id = 1;
 * @return {string}
 */
proto.Emarbox.Interface.User.prototype.getDmpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.User.prototype.setDmpId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.User.prototype.clearDmpId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.User.prototype.hasDmpId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string channel_user_id = 2;
 * @return {string}
 */
proto.Emarbox.Interface.User.prototype.getChannelUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.User.prototype.setChannelUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.User.prototype.clearChannelUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.User.prototype.hasChannelUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Gender gender = 3;
 * @return {!proto.Emarbox.Interface.User.Gender}
 */
proto.Emarbox.Interface.User.prototype.getGender = function() {
  return /** @type {!proto.Emarbox.Interface.User.Gender} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Emarbox.Interface.User.Gender} value */
proto.Emarbox.Interface.User.prototype.setGender = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emarbox.Interface.User.prototype.clearGender = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.User.prototype.hasGender = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.CreativeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Emarbox.Interface.CreativeInfo.repeatedFields_, null);
};
goog.inherits(proto.Emarbox.Interface.CreativeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.CreativeInfo.displayName = 'proto.Emarbox.Interface.CreativeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Emarbox.Interface.CreativeInfo.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.CreativeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.CreativeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.CreativeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerId: jspb.Message.getField(msg, 1),
    projectId: jspb.Message.getField(msg, 2),
    campaignId: jspb.Message.getField(msg, 3),
    creativeId: jspb.Message.getField(msg, 4),
    dynamicExt: jspb.Message.getField(msg, 5),
    rtbExt1: jspb.Message.getField(msg, 6),
    rtbExt2: jspb.Message.getField(msg, 7),
    bidType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    templateId: jspb.Message.getField(msg, 19),
    tagIdList: jspb.Message.getRepeatedField(msg, 20),
    adslot: (f = msg.getAdslot()) && proto.Emarbox.Interface.CreativeInfo.AdslotInfo.toObject(includeInstance, f),
    dealId: jspb.Message.getField(msg, 10),
    feeType: jspb.Message.getFieldWithDefault(msg, 11, "cpc"),
    bidPrice: jspb.Message.getField(msg, 12),
    ctr: jspb.Message.getOptionalFloatingPointField(msg, 13),
    ectr: jspb.Message.getOptionalFloatingPointField(msg, 14),
    adPrice: +jspb.Message.getField(msg, 15),
    adValue: jspb.Message.getOptionalFloatingPointField(msg, 16),
    campaignType: jspb.Message.getFieldWithDefault(msg, 17, 0),
    userType: jspb.Message.getFieldWithDefault(msg, 18, "9999")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.CreativeInfo}
 */
proto.Emarbox.Interface.CreativeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.CreativeInfo;
  return proto.Emarbox.Interface.CreativeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.CreativeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.CreativeInfo}
 */
proto.Emarbox.Interface.CreativeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwnerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProjectId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCampaignId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreativeId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDynamicExt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRtbExt1(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRtbExt2(value);
      break;
    case 8:
      var value = /** @type {!proto.Emarbox.Interface.CreativeInfo.BidType} */ (reader.readEnum());
      msg.setBidType(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateId(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addTagId(value);
      break;
    case 9:
      var value = new proto.Emarbox.Interface.CreativeInfo.AdslotInfo;
      reader.readMessage(value,proto.Emarbox.Interface.CreativeInfo.AdslotInfo.deserializeBinaryFromReader);
      msg.setAdslot(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeType(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBidPrice(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCtr(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEctr(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAdPrice(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAdValue(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCampaignType(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.CreativeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.CreativeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.CreativeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {!proto.Emarbox.Interface.CreativeInfo.BidType} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getTagIdList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      20,
      f
    );
  }
  f = message.getAdslot();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Emarbox.Interface.CreativeInfo.AdslotInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Emarbox.Interface.CreativeInfo.BidType = {
  PUBLIC_AUCTION: 0,
  PRIVATE_AUCTION: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Emarbox.Interface.CreativeInfo.AdslotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.CreativeInfo.AdslotInfo.displayName = 'proto.Emarbox.Interface.CreativeInfo.AdslotInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.CreativeInfo.AdslotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    adslotId: jspb.Message.getField(msg, 1),
    slotVisibility: jspb.Message.getFieldWithDefault(msg, 2, 0),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.CreativeInfo.AdslotInfo;
  return proto.Emarbox.Interface.CreativeInfo.AdslotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdslotId(value);
      break;
    case 2:
      var value = /** @type {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility} */ (reader.readEnum());
      msg.setSlotVisibility(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.CreativeInfo.AdslotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility = {
  SCREEN_UNKNOWN: 0,
  SCREEN_FIRST: 1,
  SCREEN_SECOND: 2,
  SCREEN_THIRD: 3,
  SCREEN_FOURTH: 4,
  SCREEN_FIFTH: 5,
  SCREEN_BEHIND_FIFTH: 6,
  SCREEN_BELOW_THE_FOLD: 10,
  SCREEN_TOP_VISIBLE: 11,
  SCREEN_BOTTOM_VISIBLE: 12,
  SCREEN_TOP_SCROLL_VISIBLE: 13,
  SCREEN_BOTTOM_SCROLL_VISIBLE: 14,
  SCREEN_OTHER_LOCATION: 15,
  SCREEN_HEADER: 24,
  SCREEN_FOOTER: 25,
  SCREEN_SIDEBAR: 26,
  SCREEN_FULLSCREEN: 27
};

/**
 * optional string adslot_id = 1;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.getAdslotId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.setAdslotId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.clearAdslotId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.hasAdslotId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SlotVisibility slot_visibility = 2;
 * @return {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.getSlotVisibility = function() {
  return /** @type {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo.SlotVisibility} value */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.setSlotVisibility = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.clearSlotVisibility = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.hasSlotVisibility = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.clearHeight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.AdslotInfo.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 owner_id = 1;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setOwnerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearOwnerId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasOwnerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 project_id = 2;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getProjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setProjectId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearProjectId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasProjectId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 campaign_id = 3;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getCampaignId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setCampaignId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearCampaignId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasCampaignId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 creative_id = 4;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getCreativeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setCreativeId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearCreativeId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasCreativeId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string dynamic_ext = 5;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getDynamicExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setDynamicExt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearDynamicExt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasDynamicExt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string rtb_ext1 = 6;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getRtbExt1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setRtbExt1 = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearRtbExt1 = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasRtbExt1 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string rtb_ext2 = 7;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getRtbExt2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setRtbExt2 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearRtbExt2 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasRtbExt2 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BidType bid_type = 8;
 * @return {!proto.Emarbox.Interface.CreativeInfo.BidType}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getBidType = function() {
  return /** @type {!proto.Emarbox.Interface.CreativeInfo.BidType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Emarbox.Interface.CreativeInfo.BidType} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setBidType = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearBidType = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasBidType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 template_id = 19;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getTemplateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setTemplateId = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearTemplateId = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasTemplateId = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated int64 tag_id = 20;
 * @return {!Array.<number>}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getTagIdList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 20));
};


/** @param {!Array.<number>} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setTagIdList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Emarbox.Interface.CreativeInfo.prototype.addTagId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearTagIdList = function() {
  this.setTagIdList([]);
};


/**
 * required AdslotInfo adslot = 9;
 * @return {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getAdslot = function() {
  return /** @type{!proto.Emarbox.Interface.CreativeInfo.AdslotInfo} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.CreativeInfo.AdslotInfo, 9, 1));
};


/** @param {!proto.Emarbox.Interface.CreativeInfo.AdslotInfo} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setAdslot = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearAdslot = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasAdslot = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string deal_id = 10;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getDealId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setDealId = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearDealId = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasDealId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string fee_type = 11;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getFeeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "cpc"));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setFeeType = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearFeeType = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasFeeType = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int32 bid_price = 12;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getBidPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setBidPrice = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearBidPrice = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasBidPrice = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float ctr = 13;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getCtr = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setCtr = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearCtr = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasCtr = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float ectr = 14;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getEctr = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setEctr = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearEctr = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasEctr = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required float ad_price = 15;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getAdPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setAdPrice = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearAdPrice = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasAdPrice = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float ad_value = 16;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getAdValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setAdValue = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearAdValue = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasAdValue = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 campaign_type = 17;
 * @return {number}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getCampaignType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setCampaignType = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearCampaignType = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasCampaignType = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string user_type = 18;
 * @return {string}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.getUserType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, "9999"));
};


/** @param {string} value */
proto.Emarbox.Interface.CreativeInfo.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.Emarbox.Interface.CreativeInfo.prototype.clearUserType = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.CreativeInfo.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Emarbox.Interface.Device.repeatedFields_, null);
};
goog.inherits(proto.Emarbox.Interface.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.Device.displayName = 'proto.Emarbox.Interface.Device';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Emarbox.Interface.Device.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getField(msg, 1),
    uploadInfoList: jspb.Message.toObjectList(msg.getUploadInfoList(),
    proto.Emarbox.Interface.Device.UploadInfo.toObject, includeInstance),
    geo: (f = msg.getGeo()) && proto.Emarbox.Interface.Device.Geo.toObject(includeInstance, f),
    platform: jspb.Message.getFieldWithDefault(msg, 3, 0),
    osVersion: jspb.Message.getField(msg, 4),
    brand: jspb.Message.getField(msg, 5),
    model: jspb.Message.getField(msg, 6),
    carrierId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    wirelessNetworkType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    mobileDeviceType: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.Device}
 */
proto.Emarbox.Interface.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.Device;
  return proto.Emarbox.Interface.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.Device}
 */
proto.Emarbox.Interface.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 10:
      var value = new proto.Emarbox.Interface.Device.UploadInfo;
      reader.readMessage(value,proto.Emarbox.Interface.Device.UploadInfo.deserializeBinaryFromReader);
      msg.addUploadInfo(value);
      break;
    case 2:
      var value = new proto.Emarbox.Interface.Device.Geo;
      reader.readMessage(value,proto.Emarbox.Interface.Device.Geo.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    case 3:
      var value = /** @type {!proto.Emarbox.Interface.Device.PlatformType} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 7:
      var value = /** @type {!proto.Emarbox.Interface.Device.CarrierType} */ (reader.readEnum());
      msg.setCarrierId(value);
      break;
    case 8:
      var value = /** @type {!proto.Emarbox.Interface.Device.WirelessNetworkType} */ (reader.readEnum());
      msg.setWirelessNetworkType(value);
      break;
    case 9:
      var value = /** @type {!proto.Emarbox.Interface.Device.MobileDeviceType} */ (reader.readEnum());
      msg.setMobileDeviceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUploadInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.Emarbox.Interface.Device.UploadInfo.serializeBinaryToWriter
    );
  }
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Emarbox.Interface.Device.Geo.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Emarbox.Interface.Device.PlatformType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!proto.Emarbox.Interface.Device.CarrierType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {!proto.Emarbox.Interface.Device.WirelessNetworkType} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {!proto.Emarbox.Interface.Device.MobileDeviceType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Emarbox.Interface.Device.PlatformType = {
  UNKNOWN_OS: 0,
  IOS: 1,
  ANDROID: 2,
  WINDOWS: 3
};

/**
 * @enum {number}
 */
proto.Emarbox.Interface.Device.CarrierType = {
  UNKNOWN_CARRIER: 0,
  CHINA_MOBILE: 1,
  CHINA_UNICOM: 2,
  CHINA_TELECOM: 3
};

/**
 * @enum {number}
 */
proto.Emarbox.Interface.Device.WirelessNetworkType = {
  UNKNOWN_NETWORK: 0,
  WIFI: 1,
  MOBILE_2G: 2,
  MOBILE_3G: 3,
  MOBILE_4G: 4
};

/**
 * @enum {number}
 */
proto.Emarbox.Interface.Device.MobileDeviceType = {
  UNKNOWN_DEVICE: 0,
  HIGHEND_PHONE: 1,
  TABLET: 2,
  TV: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.Device.UploadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Emarbox.Interface.Device.UploadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.Device.UploadInfo.displayName = 'proto.Emarbox.Interface.Device.UploadInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.Device.UploadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.Device.UploadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.Device.UploadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Device.UploadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.Device.UploadInfo}
 */
proto.Emarbox.Interface.Device.UploadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.Device.UploadInfo;
  return proto.Emarbox.Interface.Device.UploadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.Device.UploadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.Device.UploadInfo}
 */
proto.Emarbox.Interface.Device.UploadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Emarbox.Interface.Device.UploadInfo.IdType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.Device.UploadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.Device.UploadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.Device.UploadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Device.UploadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Emarbox.Interface.Device.UploadInfo.IdType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Emarbox.Interface.Device.UploadInfo.IdType = {
  IMEI: 1,
  IMEI_SHA1: 2,
  IMEI_MD5: 3,
  MAC: 4,
  MAC_SHA1: 5,
  MAC_MD5: 6,
  IDFA: 7,
  IDFA_SHA1: 8,
  IDFA_MD5: 9,
  ANDROID_ID: 10,
  ANDROID_ID_SHA1: 11,
  ANDROID_ID_MD5: 12,
  ADVERTISING_ID: 13
};

/**
 * required IdType type = 1;
 * @return {!proto.Emarbox.Interface.Device.UploadInfo.IdType}
 */
proto.Emarbox.Interface.Device.UploadInfo.prototype.getType = function() {
  return /** @type {!proto.Emarbox.Interface.Device.UploadInfo.IdType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.Emarbox.Interface.Device.UploadInfo.IdType} value */
proto.Emarbox.Interface.Device.UploadInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.Device.UploadInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.UploadInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string id = 2;
 * @return {string}
 */
proto.Emarbox.Interface.Device.UploadInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Device.UploadInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.Device.UploadInfo.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.UploadInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.Device.Geo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Emarbox.Interface.Device.Geo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.Device.Geo.displayName = 'proto.Emarbox.Interface.Device.Geo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.Device.Geo.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.Device.Geo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.Device.Geo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Device.Geo.toObject = function(includeInstance, msg) {
  var f, obj = {
    longitude: jspb.Message.getOptionalFloatingPointField(msg, 1),
    latitude: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.Device.Geo}
 */
proto.Emarbox.Interface.Device.Geo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.Device.Geo;
  return proto.Emarbox.Interface.Device.Geo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.Device.Geo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.Device.Geo}
 */
proto.Emarbox.Interface.Device.Geo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.Device.Geo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.Device.Geo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.Device.Geo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Device.Geo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float longitude = 1;
 * @return {number}
 */
proto.Emarbox.Interface.Device.Geo.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Emarbox.Interface.Device.Geo.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.Device.Geo.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.Geo.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float latitude = 2;
 * @return {number}
 */
proto.Emarbox.Interface.Device.Geo.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Emarbox.Interface.Device.Geo.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.Device.Geo.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.Geo.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.Emarbox.Interface.Device.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Device.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.Device.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UploadInfo upload_info = 10;
 * @return {!Array.<!proto.Emarbox.Interface.Device.UploadInfo>}
 */
proto.Emarbox.Interface.Device.prototype.getUploadInfoList = function() {
  return /** @type{!Array.<!proto.Emarbox.Interface.Device.UploadInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Emarbox.Interface.Device.UploadInfo, 10));
};


/** @param {!Array.<!proto.Emarbox.Interface.Device.UploadInfo>} value */
proto.Emarbox.Interface.Device.prototype.setUploadInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.Emarbox.Interface.Device.UploadInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Emarbox.Interface.Device.UploadInfo}
 */
proto.Emarbox.Interface.Device.prototype.addUploadInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.Emarbox.Interface.Device.UploadInfo, opt_index);
};


proto.Emarbox.Interface.Device.prototype.clearUploadInfoList = function() {
  this.setUploadInfoList([]);
};


/**
 * optional Geo geo = 2;
 * @return {?proto.Emarbox.Interface.Device.Geo}
 */
proto.Emarbox.Interface.Device.prototype.getGeo = function() {
  return /** @type{?proto.Emarbox.Interface.Device.Geo} */ (
    jspb.Message.getWrapperField(this, proto.Emarbox.Interface.Device.Geo, 2));
};


/** @param {?proto.Emarbox.Interface.Device.Geo|undefined} value */
proto.Emarbox.Interface.Device.prototype.setGeo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Emarbox.Interface.Device.prototype.clearGeo = function() {
  this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlatformType platform = 3;
 * @return {!proto.Emarbox.Interface.Device.PlatformType}
 */
proto.Emarbox.Interface.Device.prototype.getPlatform = function() {
  return /** @type {!proto.Emarbox.Interface.Device.PlatformType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Emarbox.Interface.Device.PlatformType} value */
proto.Emarbox.Interface.Device.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emarbox.Interface.Device.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string os_version = 4;
 * @return {string}
 */
proto.Emarbox.Interface.Device.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Device.prototype.setOsVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Emarbox.Interface.Device.prototype.clearOsVersion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasOsVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string brand = 5;
 * @return {string}
 */
proto.Emarbox.Interface.Device.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Device.prototype.setBrand = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Emarbox.Interface.Device.prototype.clearBrand = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string model = 6;
 * @return {string}
 */
proto.Emarbox.Interface.Device.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Device.prototype.setModel = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Emarbox.Interface.Device.prototype.clearModel = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasModel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CarrierType carrier_id = 7;
 * @return {!proto.Emarbox.Interface.Device.CarrierType}
 */
proto.Emarbox.Interface.Device.prototype.getCarrierId = function() {
  return /** @type {!proto.Emarbox.Interface.Device.CarrierType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.Emarbox.Interface.Device.CarrierType} value */
proto.Emarbox.Interface.Device.prototype.setCarrierId = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Emarbox.Interface.Device.prototype.clearCarrierId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasCarrierId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional WirelessNetworkType wireless_network_type = 8;
 * @return {!proto.Emarbox.Interface.Device.WirelessNetworkType}
 */
proto.Emarbox.Interface.Device.prototype.getWirelessNetworkType = function() {
  return /** @type {!proto.Emarbox.Interface.Device.WirelessNetworkType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Emarbox.Interface.Device.WirelessNetworkType} value */
proto.Emarbox.Interface.Device.prototype.setWirelessNetworkType = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Emarbox.Interface.Device.prototype.clearWirelessNetworkType = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasWirelessNetworkType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MobileDeviceType mobile_device_type = 9;
 * @return {!proto.Emarbox.Interface.Device.MobileDeviceType}
 */
proto.Emarbox.Interface.Device.prototype.getMobileDeviceType = function() {
  return /** @type {!proto.Emarbox.Interface.Device.MobileDeviceType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.Emarbox.Interface.Device.MobileDeviceType} value */
proto.Emarbox.Interface.Device.prototype.setMobileDeviceType = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Emarbox.Interface.Device.prototype.clearMobileDeviceType = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Device.prototype.hasMobileDeviceType = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.App = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Emarbox.Interface.App.repeatedFields_, null);
};
goog.inherits(proto.Emarbox.Interface.App, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.App.displayName = 'proto.Emarbox.Interface.App';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Emarbox.Interface.App.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.App.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.App.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.App} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.App.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getField(msg, 1),
    appTypeList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.App}
 */
proto.Emarbox.Interface.App.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.App;
  return proto.Emarbox.Interface.App.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.App} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.App}
 */
proto.Emarbox.Interface.App.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addAppType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.App.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.App.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.App} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.App.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppTypeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.Emarbox.Interface.App.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.App.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emarbox.Interface.App.prototype.clearAppId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.App.prototype.hasAppId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 app_type = 2;
 * @return {!Array.<number>}
 */
proto.Emarbox.Interface.App.prototype.getAppTypeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.Emarbox.Interface.App.prototype.setAppTypeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Emarbox.Interface.App.prototype.addAppType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.Emarbox.Interface.App.prototype.clearAppTypeList = function() {
  this.setAppTypeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emarbox.Interface.Site = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Emarbox.Interface.Site.repeatedFields_, null);
};
goog.inherits(proto.Emarbox.Interface.Site, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emarbox.Interface.Site.displayName = 'proto.Emarbox.Interface.Site';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Emarbox.Interface.Site.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emarbox.Interface.Site.prototype.toObject = function(opt_includeInstance) {
  return proto.Emarbox.Interface.Site.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emarbox.Interface.Site} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Site.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaTypeList: jspb.Message.getRepeatedField(msg, 1),
    domain: jspb.Message.getField(msg, 2),
    anonymousId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emarbox.Interface.Site}
 */
proto.Emarbox.Interface.Site.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emarbox.Interface.Site;
  return proto.Emarbox.Interface.Site.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emarbox.Interface.Site} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emarbox.Interface.Site}
 */
proto.Emarbox.Interface.Site.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMediaType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnonymousId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emarbox.Interface.Site.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emarbox.Interface.Site.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emarbox.Interface.Site} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emarbox.Interface.Site.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMediaTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated string media_type = 1;
 * @return {!Array.<string>}
 */
proto.Emarbox.Interface.Site.prototype.getMediaTypeList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.Emarbox.Interface.Site.prototype.setMediaTypeList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Emarbox.Interface.Site.prototype.addMediaType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Emarbox.Interface.Site.prototype.clearMediaTypeList = function() {
  this.setMediaTypeList([]);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.Emarbox.Interface.Site.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Site.prototype.setDomain = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emarbox.Interface.Site.prototype.clearDomain = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Site.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string anonymous_id = 3;
 * @return {string}
 */
proto.Emarbox.Interface.Site.prototype.getAnonymousId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Emarbox.Interface.Site.prototype.setAnonymousId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emarbox.Interface.Site.prototype.clearAnonymousId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emarbox.Interface.Site.prototype.hasAnonymousId = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.Emarbox.Interface);
